'use strict';

var axios = require('axios');
var dateFns = require('date-fns');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var axios__default = /*#__PURE__*/_interopDefaultLegacy(axios);

const config = {
    BASE_URL: 'https://api.mapbox.com',
    TELEMETRY_URL: 'https://events.mapbox.com',
    SOURCE_URL: 'mapbox://mapbox-ads.bq09b9qc',
    LAYER_SOURCE_ID: 'promoted-pins-8s73mu',
    ACCESS_TOKEN: '',
    MOBILE_MAX_WIDTH: 768,
    DEBUG: false,
};

class Event {
    type;
    data;
    constructor(type, data = {}) {
        this.type = type;
        this.data = data;
    }
}

const axiosInstance = (options = {}) => {
    const { baseURL, isBlob } = options;
    return axios__default["default"].create({
        baseURL: baseURL || config.BASE_URL,
        headers: {
            'Content-Type': 'application/json',
        },
        timeout: 1000 * 30,
        responseType: isBlob ? 'blob' : 'json',
    });
};

const randomString = (length = 8) => (Math.random().toString(length).substring(2));

const ACTIONS = {
    CALL: 'Call',
    NAVIGATION: 'Navigation',
    DETAIL: 'Detail',
    BANNER: 'BannerDetail',
};

let lastSessionTime = new Date();
let sessionIdentifier = randomString();
const verifySession = async () => {
    if (!lastSessionTime || dateFns.differenceInSeconds(new Date(), lastSessionTime) > 60) {
        lastSessionTime = new Date();
        sessionIdentifier = randomString();
        await sessionStart();
    }
};
function sendEvent(params) {
    if (config.DEBUG) {
        return;
    }
    return new Promise((resolve, reject) => {
        const url = `/events/v2?access_token=${config.ACCESS_TOKEN}`;
        return axiosInstance({
            baseURL: config.TELEMETRY_URL,
            isBlob: true
        }).post(url, params).then((res) => {
            resolve(res.data);
        }).catch((error) => {
            console.error(error);
            reject(error);
        });
    });
}
async function sessionStart() {
    const params = {
        sessionIdentifier,
        event: 'adMetrics.sessionStart',
        bucket: 'undefined',
        created: new Date().toISOString(),
    };
    return sendEvent([params]);
}
async function sendSelection(adid, zoomLevel) {
    const params = {
        sessionIdentifier,
        event: 'adMetrics.select',
        adid,
        zoomLevel,
        created: new Date().toISOString(),
    };
    await verifySession();
    return sendEvent([params]);
}
async function sendDeselection(adid) {
    const params = {
        sessionIdentifier,
        event: 'adMetrics.deselect',
        adid,
        created: new Date().toISOString(),
    };
    await verifySession();
    return sendEvent([params]);
}
async function sendVisibilities(features) {
    const params = features.map(({ adid, visibleStartTime, visibleEndTime }) => ({
        sessionIdentifier,
        event: 'adMetrics.visible',
        adid,
        visibleStartTime,
        visibleEndTime,
        created: new Date().toISOString(),
    }));
    await verifySession();
    return sendEvent(params);
}
async function sendAction(adid, action) {
    const params = {
        sessionIdentifier,
        event: 'adMetrics.callToAction',
        adid,
        action,
        created: new Date().toISOString(),
    };
    await verifySession();
    return sendEvent([params]);
}

const EVENT_TYPES = {
    LOAD: 'load',
    MOVE: 'move',
    CLICK_PIN: 'click_pin',
    CLICK_CARD: 'click_card',
    SHOW_CARD: 'show_card',
    UPDATE_CARD: 'update_card',
    CLOSE_CARD: 'close_card',
    CLICK_SIDE_CARD: 'click_side_card',
    SHOW_SIDE_CARD: 'show_side_card',
    UPDATE_SIDE_CARD: 'update_side_card',
    OPEN_SIDE_CARD: 'open_side_card',
    HIDE_SIDE_CARD: 'hide_side_card',
    CLOSE_SIDE_CARD: 'close_side_card',
    CLICK_POPUP: 'click_popup',
    SHOW_POPUP: 'show_popup',
    CLOSE_POPUP: 'close_popup',
};
const CLICK_TYPES = {
    CARD: 'card',
    TOGGLE: 'toggle',
    BANNER: 'banner',
    PHONE: 'phone',
    DIRECTIONS: 'directions',
    DETAIL: 'detail',
};
const TELEMETRY_ACTIONS = {
    [CLICK_TYPES.BANNER]: ACTIONS.BANNER,
    [CLICK_TYPES.PHONE]: ACTIONS.CALL,
    [CLICK_TYPES.DIRECTIONS]: ACTIONS.NAVIGATION,
    [CLICK_TYPES.DETAIL]: ACTIONS.DETAIL,
};

const camelCase = (object) => {
    const updatedObject = {};
    for (const key in object) {
        if (object.hasOwnProperty(key)) {
            updatedObject[key.replace(/(\_\w)/g, updatedKey => (updatedKey[1].toUpperCase()))] = object[key];
        }
    }
    return updatedObject;
};
const formatProperties = (properties) => camelCase(properties);

exports.EVENT_TYPES = EVENT_TYPES;
exports.Event = Event;
exports.TELEMETRY_ACTIONS = TELEMETRY_ACTIONS;
exports.config = config;
exports.formatProperties = formatProperties;
exports.sendAction = sendAction;
exports.sendDeselection = sendDeselection;
exports.sendSelection = sendSelection;
exports.sendVisibilities = sendVisibilities;
exports.sessionStart = sessionStart;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
